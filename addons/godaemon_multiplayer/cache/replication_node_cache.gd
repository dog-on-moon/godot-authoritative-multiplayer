@tool
extends Resource
## Stores a cache of replication data for a given scene path
## Autogenerated when a scene is selected to be replicated

const UTILS := preload("res://addons/godaemon_multiplayer/util/util.gd")

@export var rep_id: int
@export var property_caches: Dictionary = {}:
	set(x):
		property_caches = x
		# Initialize reversed dict when resource is loaded
		rep_id_to_prop = UTILS.invert_dictionary(property_caches)

var rep_id_to_prop: Dictionary = {}

func _init(p_rep_id: int = 0) -> void:
	rep_id = p_rep_id

## Adds a new property to the cache with the correct value
func add_prop_cache(node: Node, property: String) -> void:
	var prop_path: NodePath = get_prop_path(node, property)
	var next_prop_id: int = get_next_prop_rep_id()
	property_caches[prop_path] = next_prop_id
	rep_id_to_prop[next_prop_id] = prop_path

## Removes a property from the cache
func remove_prop_cache(node: Node, property: String) -> void:
	var prop_path: NodePath = get_prop_path(node, property)
	var old_rep_id: int = property_caches.get(prop_path, -1)
	if prop_path in property_caches:
		property_caches.erase(prop_path)
	if old_rep_id != -1:
		rep_id_to_prop.erase(old_rep_id)

## Gets the next valid property replication ID
func get_next_prop_rep_id() -> int:
	var curr_max = property_caches.values().max()
	if curr_max == null:
		curr_max = -1
	return curr_max + 1

func get_prop_path(node: Node, property_name: String) -> NodePath:
	var owner_node: Node = get_owner_node(node)
	return NodePath(str(owner_node.get_path_to(node)) + property_name)

func get_owner_node(node: Node) -> Node:
	return node if node.scene_file_path else node.owner
